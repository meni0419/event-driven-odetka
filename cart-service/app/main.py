import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .config import settings
from .database import test_connection, Base, engine
from .services.kafka_client import kafka_client
from .api.routes.cart import router as cart_router  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting Cart Service...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        logger.info("üîå Testing database connection...")
        if test_connection():
            logger.info("‚úÖ Database connection successful")
        else:
            logger.error("‚ùå Database connection failed")
            raise Exception("Database connection failed")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
        logger.info("üìä Creating database tables...")
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Database tables created")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka producer
        logger.info("üîå Starting Kafka producer...")
        await kafka_client.start_producer()
        logger.info("‚úÖ Kafka producer started")

        logger.info("üéâ Cart Service started successfully!")

        yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    except Exception as e:
        logger.error(f"‚ùå Failed to start Cart Service: {e}")
        raise

    # Shutdown
    logger.info("üõë Shutting down Cart Service...")

    try:
        await kafka_client.stop_producer()
        logger.info("‚úÖ Kafka producer stopped")
    except Exception as e:
        logger.error(f"‚ùå Error stopping Kafka producer: {e}")

    logger.info("‚úÖ Cart Service shut down successfully!")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=settings.app_name,
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫",
    version="1.0.0",
    debug=settings.debug,
    lifespan=lifespan
)

# CORS middleware - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(
    cart_router,
    prefix="/api/v1",
    tags=["cart"]
)


# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_status = "healthy" if test_connection() else "unhealthy"

    return {
        "status": "healthy",
        "service": settings.app_name,
        "database": db_status,
        "kafka_producer": "running" if kafka_client.producer else "stopped",
        "version": "1.0.0"
    }


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": settings.app_name,
        "version": "1.0.0",
        "status": "running",
        "description": "Shopping cart microservice",
        "endpoints": {
            "health": "/health",
            "cart": "/api/v1/cart",
            "docs": "/docs"
        }
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8001,
        reload=settings.debug,
        log_level="info"
    )
