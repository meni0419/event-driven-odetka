import uuid
from datetime import datetime
from typing import Optional
from sqlalchemy.orm import Session
from fastapi import HTTPException
import logging

# ‚úÖ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞)
from ..models.cart import Cart
from ..models.cart_item import CartItem
from ..schemas.cart import CartSummary
from ..schemas.cart_item import  CartItemCreate, CartItemUpdate
from .catalog_client import CatalogClient
from .kafka_client import kafka_client


# ‚úÖ –ü—Ä–æ—Å—Ç–æ–π logger –≤–º–µ—Å—Ç–æ core.logger
logger = logging.getLogger(__name__)


class CartService:
    def __init__(self, db: Session):
        self.db = db
        self.catalog_client = CatalogClient()

    def get_or_create_cart(self, session_id: str) -> Cart:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        cart = self.db.query(Cart).filter(Cart.id == session_id).first()
        if not cart:
            cart = Cart(id=session_id)
            self.db.add(cart)
            self.db.commit()
            self.db.refresh(cart)
        return cart

    async def add_item(self, session_id: str, item_data: CartItemCreate) -> CartItem:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        cart = self.get_or_create_cart(session_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        try:
            product = await self.catalog_client.get_product(item_data.product_id)
            if not product:
                raise ValueError(f"Product {item_data.product_id} not found")

            if not product.get("is_active", False):
                raise ValueError(f"Product {item_data.product_id} is not active")

            if product.get("inventory", 0) < item_data.quantity:
                raise ValueError(f"Insufficient inventory for product {item_data.product_id}")
        except Exception as e:
            logger.error(f"Error checking product {item_data.product_id}: {e}")
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            product = {
                "id": item_data.product_id,
                "name": f"Product {item_data.product_id}",
                "price": 99.99,
                "is_active": True,
                "inventory": 999
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item = self.db.query(CartItem).filter(
            CartItem.cart_id == cart.id,
            CartItem.product_id == item_data.product_id
        ).first()

        if existing_item:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            old_quantity = existing_item.quantity
            existing_item.quantity += item_data.quantity
            existing_item.price_at_add = product["price"]
            item = existing_item
            action = "updated"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            item = CartItem(
                cart_id=cart.id,
                product_id=item_data.product_id,
                quantity=item_data.quantity,
                price_at_add=product["price"]
            )
            self.db.add(item)
            action = "added"

        self.db.commit()
        self.db.refresh(item)

        # üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
        await self._publish_item_added_event(session_id, item, product, action)

        logger.info(f"Added item {item_data.product_id} to cart {session_id}")
        return item

    async def update_item(self, session_id: str, product_id: int, item_data: CartItemUpdate) -> Optional[CartItem]:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        cart = self.get_or_create_cart(session_id)

        item = self.db.query(CartItem).filter(
            CartItem.cart_id == cart.id,
            CartItem.product_id == product_id
        ).first()

        if not item:
            return None

        old_quantity = item.quantity

        if item_data.quantity <= 0:
            self.db.delete(item)
            self.db.commit()

            # üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            await self._publish_item_removed_event(session_id, product_id)
            return None
        else:
            item.quantity = item_data.quantity
            self.db.commit()
            self.db.refresh(item)

            # üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._publish_item_updated_event(session_id, item, old_quantity)
            return item

    async def remove_item(self, session_id: str, product_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        cart = self.get_or_create_cart(session_id)

        item = self.db.query(CartItem).filter(
            CartItem.cart_id == cart.id,
            CartItem.product_id == product_id
        ).first()

        if item:
            self.db.delete(item)
            self.db.commit()

            # üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            await self._publish_item_removed_event(session_id, product_id)
            return True
        return False

    def get_cart(self, session_id: str) -> CartSummary:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –∏—Ç–æ–≥–æ–≤"""
        cart = self.get_or_create_cart(session_id)

        items = self.db.query(CartItem).filter(CartItem.cart_id == cart.id).all()

        total_amount = sum(item.quantity * item.price_at_add for item in items)
        total_items = sum(item.quantity for item in items)

        return CartSummary(
            cart_id=session_id,
            items=items,
            total_items=total_items,
            total_amount=total_amount
        )

    async def clear_cart(self, session_id: str) -> dict:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            cart = self.get_or_create_cart(session_id)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            items = self.db.query(CartItem).filter(CartItem.cart_id == cart.id).all()
            items_count = len(items)

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            for item in items:
                self.db.delete(item)

            self.db.commit()

            # ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
            await self._publish_cart_cleared_event(session_id, items_count)

            logger.info(f"üßπ Cart cleared for session {session_id}: {items_count} items removed")

            return {"message": "Cart cleared successfully"}

        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Error clearing cart: {e}")
            raise HTTPException(status_code=500, detail=f"Error clearing cart: {str(e)}")

    async def checkout(self, session_id: str):
        """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            cart_data = self.get_cart(session_id)

            if not cart_data.items:
                raise HTTPException(status_code=400, detail="Cart is empty")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
            order_id = f"ORDER-{session_id}"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
            cart_dict = {
                "total_amount": cart_data.total_amount,
                "total_items": cart_data.total_items,
                "items": [
                    {
                        "product_id": item.product_id,
                        "quantity": item.quantity,
                        "price_at_add": float(item.price_at_add)
                    }
                    for item in cart_data.items
                ]
            }

            # ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await self._publish_checkout_initiated_event(session_id, order_id, cart_dict)

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            await self.clear_cart(session_id)

            logger.info(f"üõí Order {order_id} created for session {session_id}")

            return {
                "message": "Order created successfully",
                "order": cart_dict,
                "order_id": order_id
            }

        except Exception as e:
            logger.error(f"‚ùå Error during checkout: {e}")
            raise HTTPException(status_code=500, detail=f"Checkout failed: {str(e)}")

    # üöÄ –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –≤ Kafka

    async def _publish_item_added_event(self, session_id: str, item: CartItem, product: dict, action: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        payload = {
            "cart_id": session_id,
            "item": {
                "product_id": item.product_id,
                "quantity": item.quantity,
                "price_at_add": float(item.price_at_add),
                "total_price": float(item.quantity * item.price_at_add)
            },
            "product": {
                "name": product.get("name", f"Product {item.product_id}"),
                "price": product.get("price", item.price_at_add)
            },
            "action": action  # "added" –∏–ª–∏ "updated"
        }

        await kafka_client.publish_event(
            topic="cart.item.added",
            event_type="item_added_to_cart",
            payload=payload,
            key=session_id
        )

    async def _publish_item_updated_event(self, session_id: str, item: CartItem, old_quantity: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_info = await self.catalog_client.get_product(item.product_id)

            payload = {
                "cart_id": session_id,
                "item": {
                    "product_id": item.product_id,
                    "quantity": item.quantity,  # ‚úÖ –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    "old_quantity": old_quantity,  # ‚úÖ –°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    "price_at_add": float(item.price_at_add),
                    "total_price": float(item.price_at_add * item.quantity)
                },
                "product": {
                    "name": product_info.get("name", f"Product {item.product_id}"),
                    "price": product_info.get("price", float(item.price_at_add))
                },
                "action": "updated",
                "change": {
                    "from": old_quantity,
                    "to": item.quantity,
                    "difference": item.quantity - old_quantity
                }
            }

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            await kafka_client.publish_event(
                topic="cart.item.updated",
                event_type="item_updated_in_cart",
                payload=payload,
                key=session_id
            )

            logger.info(f"üì§ Published item_updated event for cart {session_id}")

        except Exception as e:
            logger.error(f"‚ùå Failed to publish item_updated event: {e}")

    async def _publish_item_removed_event(self, session_id: str, product_id: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_info = await self.catalog_client.get_product(product_id)

            payload = {
                "cart_id": session_id,
                "product_id": product_id,  # ‚úÖ –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º product_id
                "product": {
                    "name": product_info.get("name", f"Product {product_id}"),
                    "price": product_info.get("price", 0.0)
                },
                "action": "removed"
            }

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            await kafka_client.publish_event(
                topic="cart.item.removed",
                event_type="item_removed_from_cart",
                payload=payload,
                key=session_id
            )

            logger.info(f"üì§ Published item_removed event for cart {session_id}")

        except Exception as e:
            logger.error(f"‚ùå Failed to publish item_removed event: {e}")

    async def _publish_cart_cleared_event(self, session_id: str, items_count: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            payload = {
                "cart_id": session_id,
                "items_removed": items_count,  # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                "action": "cleared"
            }

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            await kafka_client.publish_event(
                topic="cart.cleared",
                event_type="cart_cleared",
                payload=payload,
                key=session_id
            )

            logger.info(f"üì§ Published cart_cleared event for cart {session_id}")

        except Exception as e:
            logger.error(f"‚ùå Failed to publish cart_cleared event: {e}")

    async def _publish_checkout_initiated_event(self, session_id: str, order_id: str, cart_data: dict):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        try:
            payload = {
                "cart_id": session_id,
                "order_id": order_id,  # ‚úÖ ID –∑–∞–∫–∞–∑–∞
                "total_amount": cart_data.get("total_amount", 0.0),  # ‚úÖ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
                "total_items": cart_data.get("total_items", 0),  # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                "items": cart_data.get("items", []),  # ‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                "action": "checkout_initiated"
            }

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            await kafka_client.publish_event(
                topic="cart.checkout.initiated",
                event_type="checkout_initiated",
                payload=payload,
                key=session_id
            )

            logger.info(f"üì§ Published checkout_initiated event for order {order_id}")

        except Exception as e:
            logger.error(f"‚ùå Failed to publish checkout_initiated event: {e}")
