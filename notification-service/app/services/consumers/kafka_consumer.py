import json
import logging
import asyncio
from typing import Dict, Any, List, Callable
from aiokafka import AIOKafkaConsumer
from aiokafka.errors import KafkaConnectionError, KafkaTimeoutError

from ...config import settings

logger = logging.getLogger(__name__)


class KafkaEventConsumer:
    """Kafka Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self):
        self.consumer = None
        self.handlers: Dict[str, List[Callable]] = {}
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ Kafka Consumer"""
        try:
            self.consumer = AIOKafkaConsumer(
                *settings.kafka_topics,
                bootstrap_servers=settings.kafka_bootstrap_servers,
                group_id=settings.kafka_group_id,
                auto_offset_reset=settings.kafka_auto_offset_reset,
                value_deserializer=lambda m: json.loads(m.decode('utf-8'))
            )

            await self.consumer.start()
            logger.info(f"‚úÖ Kafka consumer started for topics: {settings.kafka_topics}")

        except Exception as e:
            logger.error(f"‚ùå Failed to start Kafka consumer: {e}")
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka Consumer"""
        self.running = False
        if self.consumer:
            try:
                await self.consumer.stop()
                logger.info("‚úÖ Kafka consumer stopped")
            except Exception as e:
                logger.error(f"‚ùå Error stopping Kafka consumer: {e}")

    def register_handler(self, event_type: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
        if event_type not in self.handlers:
            self.handlers[event_type] = []
        self.handlers[event_type].append(handler)
        logger.info(f"‚úÖ Registered handler for event type: {event_type}")

    async def consume_events(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        if not self.consumer:
            raise RuntimeError("Consumer not started")

        self.running = True
        logger.info("üîÑ Starting event consumption...")

        try:
            async for message in self.consumer:
                if not self.running:
                    break

                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    event_data = message.value
                    topic = message.topic
                    partition = message.partition
                    offset = message.offset

                    logger.info(
                        f"üì® Received event: {event_data.get('event_type')} "
                        f"from {topic} (partition: {partition}, offset: {offset})"
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    await self._process_event(event_data, topic)

                except Exception as e:
                    logger.error(f"‚ùå Error processing message: {e}")
                    # –í production –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É retry –∏–ª–∏ DLQ

        except Exception as e:
            logger.error(f"‚ùå Error in consume loop: {e}")
            raise

    async def _process_event(self, event_data: Dict[str, Any], topic: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        event_type = event_data.get('event_type')

        if not event_type:
            logger.warning(f"‚ö†Ô∏è Event without type received from {topic}")
            return

        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        handlers = self.handlers.get(event_type, [])

        if not handlers:
            logger.warning(f"‚ö†Ô∏è No handlers registered for event type: {event_type}")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for handler in handlers:
            try:
                task = asyncio.create_task(handler(event_data))
                tasks.append(task)
            except Exception as e:
                logger.error(f"‚ùå Error creating task for handler {handler.__name__}: {e}")

        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå Handler {handlers[i].__name__} failed: {result}")
                else:
                    logger.debug(f"‚úÖ Handler {handlers[i].__name__} completed successfully")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä consumer'–∞
kafka_consumer = KafkaEventConsumer()