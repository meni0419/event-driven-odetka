import logging
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI

from .config import settings
from .services.consumers.kafka_consumer import kafka_consumer
from .services.handlers.cart_handlers import CartEventHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting Notification Service...")

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        logger.info("üìã Registering event handlers...")
        kafka_consumer.register_handler("item_added_to_cart", CartEventHandlers.handle_item_added)
        kafka_consumer.register_handler("item_updated_in_cart", CartEventHandlers.handle_item_updated)
        kafka_consumer.register_handler("item_removed_from_cart", CartEventHandlers.handle_item_removed)
        kafka_consumer.register_handler("cart_cleared", CartEventHandlers.handle_cart_cleared)
        kafka_consumer.register_handler("checkout_initiated", CartEventHandlers.handle_checkout_initiated)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka consumer
        logger.info("üîå Starting Kafka consumer...")
        await kafka_consumer.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        consumer_task = asyncio.create_task(kafka_consumer.consume_events())

        logger.info("‚úÖ Notification Service started successfully!")
        logger.info(f"üéØ Listening to topics: {settings.