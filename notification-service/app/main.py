import logging
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI

from .config import settings
from .services.consumers.kafka_consumer import kafka_consumer
from .services.handlers.cart_handlers import CartEventHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting Notification Service...")

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        logger.info("üìã Registering event handlers...")
        kafka_consumer.register_handler("item_added_to_cart", CartEventHandlers.handle_item_added)
        kafka_consumer.register_handler("item_updated_in_cart", CartEventHandlers.handle_item_updated)
        kafka_consumer.register_handler("item_removed_from_cart", CartEventHandlers.handle_item_removed)
        kafka_consumer.register_handler("cart_cleared", CartEventHandlers.handle_cart_cleared)
        kafka_consumer.register_handler("checkout_initiated", CartEventHandlers.handle_checkout_initiated)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka consumer
        logger.info("üîå Starting Kafka consumer...")
        await kafka_consumer.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        consumer_task = asyncio.create_task(kafka_consumer.consume_events())

        logger.info("‚úÖ Notification Service started successfully!")
        logger.info(f"üéØ Listening to topics: {settings.kafka_topics}")

        yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    except Exception as e:
        logger.error(f"‚ùå Failed to start Notification Service: {e}")
        raise

    # Shutdown
    logger.info("üõë Shutting down Notification Service...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º consumer
    try:
        await kafka_consumer.stop()
        consumer_task.cancel()
        try:
            await consumer_task
        except asyncio.CancelledError:
            pass
    except Exception as e:
        logger.error(f"‚ùå Error stopping Kafka consumer: {e}")

    logger.info("‚úÖ Notification Service shut down successfully!")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=settings.app_name,
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    version="1.0.0",
    debug=settings.debug,
    lifespan=lifespan
)


# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": settings.app_name,
        "kafka_consumer": "running" if kafka_consumer.running else "stopped",
        "subscribed_topics": settings.kafka_topics,
        "version": "1.0.0"
    }


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": settings.app_name,
        "version": "1.0.0",
        "status": "running",
        "description": "Event-driven notification service",
        "subscribed_topics": settings.kafka_topics,
        "endpoints": {
            "health": "/health",
            "docs": "/docs"
        }
    }


# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    return {
        "consumer_status": "running" if kafka_consumer.running else "stopped",
        "registered_handlers": list(kafka_consumer.handlers.keys()),
        "subscribed_topics": settings.kafka_topics
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8002,
        reload=settings.debug,
        log_level="info"
    )