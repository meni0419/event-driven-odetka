from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import asyncio

from .config import settings
from .database import engine, Base
from .api import api_router
from .events.producer import order_event_producer
from .events.consumer import order_event_consumer
from .events.handlers import OrderEventHandlers
from .api.routes.orders import router as orders_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–¥–∞—á–∏ consumer'–∞
consumer_task = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global consumer_task

    # Startup
    logger.info("üöÄ Starting Order Service...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ Database tables created")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka producer
        await order_event_producer.start()
        logger.info("‚úÖ Kafka producer started")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka consumer
        await order_event_consumer.start()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        order_event_consumer.register_handler(
            "checkout_initiated",  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
            OrderEventHandlers.handle_checkout_initiated
        )
        order_event_consumer.register_handler(
            "payment_processed",
            OrderEventHandlers.handle_payment_processed
        )
        order_event_consumer.register_handler(
            "payment_failed",
            OrderEventHandlers.handle_payment_failed
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º consumer –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        consumer_task = asyncio.create_task(order_event_consumer.consume_events())
        logger.info("‚úÖ Kafka consumer started and handlers registered")

        logger.info("üéâ Order Service started successfully!")

        yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    except Exception as e:
        logger.error(f"‚ùå Failed to start Order Service: {e}")
        raise

    # Shutdown
    logger.info("üõë Shutting down Order Service...")

    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º consumer
        if consumer_task and not consumer_task.done():
            consumer_task.cancel()
            try:
                await consumer_task
            except asyncio.CancelledError:
                pass

        await order_event_consumer.stop()
        logger.info("‚úÖ Kafka consumer stopped")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º producer
        await order_event_producer.stop()
        logger.info("‚úÖ Kafka producer stopped")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await engine.dispose()
        logger.info("‚úÖ Database connection closed")

        logger.info("üëã Order Service shut down complete")

    except Exception as e:
        logger.error(f"‚ùå Error during shutdown: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Order Service",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API routes
app.include_router(api_router)
app.include_router(
    orders_router,
    prefix="/api/v1",
    tags=["orders"]
)


# Health check endpoints
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, Kafka –∏ —Ç.–¥.
        return {
            "status": "healthy",
            "service": "order-service",
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unhealthy")


@app.get("/health/ready")
async def readiness_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã
        is_ready = (
                order_event_producer.producer is not None and
                order_event_consumer.consumer is not None and
                consumer_task is not None and not consumer_task.done()
        )

        if is_ready:
            return {
                "status": "ready",
                "service": "order-service"
            }
        else:
            raise HTTPException(status_code=503, detail="Service not ready")

    except Exception as e:
        logger.error(f"‚ùå Readiness check failed: {e}")
        raise HTTPException(status_code=503, detail="Service not ready")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Order Service API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå Unhandled exception: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": "An unexpected error occurred"
        }
    )


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8002,
        reload=settings.debug
    )
